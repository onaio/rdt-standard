apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.smartregister.gradle.jarjar'

if (project.file('google-services.json').exists()) {
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'com.google.firebase.crashlytics'
}

repositories {
    maven { url "https://s3.amazonaws.com/repo.commonsware.com" }
}

jacoco {
    toolVersion = "0.8.5"
}

android {
    compileSdkVersion 29

    defaultConfig {
        applicationId "io.ona.rdt"
        minSdkVersion 22
        targetSdkVersion 29
        versionCode 10
        versionName "v1.15.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "int", "MAX_SYNC_RETRIES", '3'
        buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '1'
        buildConfigField "long", "SYNC_INTERVAL_MINUTES", '15'

        def oneScanClientId = System.getenv('ONE_SCAN_CLIENT_ID')
        def oneScanAuthToken = System.getenv('ONE_SCAN_AUTH_TOKEN')
        buildConfigField "String", "ONE_SCAN_CLIENT_ID", "\"$oneScanClientId\""
        buildConfigField "String", "ONE_SCAN_AUTH_TOKEN", "\"$oneScanAuthToken\""

        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }

    sourceSets {
        main.assets.srcDirs += ['src/test/assets/', 'src/testCovidIndonesia/assets/']
    }

    dataBinding.enabled = true

    lintOptions {
        lintConfig file("lint.xml")
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        coreLibraryDesugaringEnabled true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }

    buildTypes {
        debug {
            resValue "string", 'opensrp_base_url', '"https://rdt-stage.smartregister.org/opensrp/"'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '50'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '50'
            buildConfigField "boolean", "SAVE_IMAGES_TO_GALLERY", 'true'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '250'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '100'
            buildConfigField "boolean", "SAVE_IMAGES_TO_GALLERY", 'false'
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }

        unitTests.all {
            jvmArgs "-Xmx3g"
        }
    }

    flavorDimensions "version"

    productFlavors {
        malariaIndonesia {
            resValue "string", 'opensrp_base_url', '"https://rdt-id.smartregister.org/opensrp/"'
            buildConfigField "String", "LOCALE", "\"id\""
            versionNameSuffix "-MALARIA-ID"
            buildConfigField "String", "LOGIN_ACTIVITY", '"io.ona.rdt.activity.LoginActivity"'
        }

        malariaKenya {
            resValue "string", 'opensrp_base_url', '"https://rdt-ke.smartregister.org/opensrp/"'
            buildConfigField "String", "LOCALE", "\"en\""
            versionNameSuffix "-MALARIA-KE"
            buildConfigField "String", "LOGIN_ACTIVITY", '"io.ona.rdt.activity.LoginActivity"'
        }

        covidIndonesia {
            applicationId "io.ona.diagnostics.rdt.configurable.id"
            resValue "string", 'opensrp_base_url', '"https://covid.opensrp.id/opensrp/"'
            buildConfigField "String", "LOCALE", "\"id\""
            versionName "v1.8.2"
            versionNameSuffix "-CONFIGURABLE-RDT"
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '2'
            buildConfigField "String", "LOGIN_ACTIVITY", '"io.ona.rdt.activity.CovidLoginActivity"'
        }
    }

    buildTypes.all { buildType ->
        def isDebugAPK = buildType.debuggable
        if (project.rootProject.file("local.properties").exists()) {
                Properties properties = new Properties()
                properties.load(project.rootProject.file("local.properties").newDataInputStream())
                def oauthClientId = isDebugAPK ? properties["staging.oauth.client.id"] : properties["production.oauth.client.id"];
                def oauthClientSecret = isDebugAPK ? properties["staging.oauth.client.secret"] : properties["production.oauth.client.secret"];
                buildConfigField "String", "OAUTH_CLIENT_ID", oauthClientId
                buildConfigField "String", "OAUTH_CLIENT_SECRET", oauthClientSecret
        } else {
                buildConfigField "String", "OAUTH_CLIENT_ID", "\"sample_client_id\""
                buildConfigField "String", "OAUTH_CLIENT_SECRET", "\"sample_client_secret\""
        }
    }
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.9'

    implementation "androidx.core:core-ktx:1.0.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation "com.google.android.material:material:1.1.0-beta01"
    implementation 'org.apache.commons:commons-lang3:3.9'

    implementation 'com.google.firebase:firebase-analytics:17.4.2'
    implementation 'com.google.firebase:firebase-crashlytics:17.0.0'
    implementation 'com.google.android.gms:play-services-location:17.0.0'

    implementation('org.smartregister:opensrp-client-native-form:1.14.8.0-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'org.robolectric'
        exclude group: 'com.crashlytics.sdk.android'
        exclude group: 'com.google.android.gms', module: 'play-services-basement'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'cardview-v7'
        exclude group: 'com.android.support', module: 'support-media-compat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
    }

    implementation('org.smartregister:opensrp-client-core:3.2.0-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'org.robolectric'
        exclude group: 'com.crashlytics.sdk.android'
        exclude group: 'com.google.android.gms', module: 'play-services-basement'
        exclude group: 'com.github.bmelnychuk', module: 'atv'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.google.android.gms', module: 'play-services-vision'
        exclude group: 'org.apache.httpcomponents', module: 'httpmime'
        exclude group: 'com.rengwuxian.materialedittext', module: 'library'
        exclude group: 'com.ibm.fhir', module: 'fhir-model'
    }

    implementation 'androidx.vectordrawable:vectordrawable-animated:1.0.0'
    implementation 'androidx.media:media:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.appcompat:appcompat:1.0.0'

    jarJar 'com.ibm.fhir:fhir-model:4.2.3'
    implementation fileTree(dir: "./build/libs", include: ['*.jar'])

    testImplementation "org.robolectric:shadows-multidex:4.3.1"
    testImplementation "org.robolectric:robolectric:4.3.1"

    testImplementation 'junit:junit:4.12'
    // PowerMock
    def powerMockVersion = '2.0.2'
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$powerMockVersion"
    testImplementation 'com.ibm.fhir:fhir-model:4.2.3'

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.1'

    debugImplementation 'androidx.fragment:fragment-testing:1.2.5'
    testImplementation 'androidx.test.ext:junit:1.1.1'
}

jarJar {
    // Dependencies and related JarJar rules
    remove = ['fhir-model-4.2.3.jar': 'com.ibm.fhir.model.visitor.CopyingVisitor*']
}


project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }

    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }

    // when no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    // Iterate over the flavors
    productFlavors.each {

        productFlavorName ->

            // Iterate over build types like debug,release,prod etc.
            buildTypes.each {

                buildTypeName ->
                    // sourceName — e.g. freeDebug, sourcePath — e.g. free/debug
                    def sourceName, sourcePath
                    if (!productFlavorName) {
                        sourceName = sourcePath = "${buildTypeName}"
                    } else {
                        sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                    }

                    // testTaskName —  e.g. testFreeDebugUnitTest task that the coverage task depends on,
                    def testTaskName = "test${sourceName.capitalize()}UnitTest"

                    // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
                    task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
                        group = "Reporting"
                        description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                        getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
                        getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

                        classDirectories.from(fileTree(
                                dir: "${project.buildDir}/intermediates/javac/${sourceName}/classes/",
                                excludes: [
                                        '**/R.class',
                                        '**/R$*.class',
                                        '**/*$ViewInjector*.*',
                                        '**/*$ViewBinder*.*',
                                        '**/BuildConfig.*',
                                        '**/Manifest*.*',
                                        '**/META-INF/**/*'
                                ]
                        ))

                        def coverageSourceDirs = [
                                "src/main/java",
                                "src/$productFlavorName/java",
                                "src/$buildTypeName/java"
                        ]
                        additionalSourceDirs.from(files(coverageSourceDirs))
                        sourceDirectories.from(files(coverageSourceDirs))
                        executionData.from(files("${project.buildDir}/jacoco/${testTaskName}.exec"))

                        reports {
                            // enables and disable the type of file you need
                            xml.enabled = true
                            html.enabled = true
                        }
                    }
            }
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

coveralls {
    sourceDirs += android.sourceSets.covidIndonesia.java.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
}
